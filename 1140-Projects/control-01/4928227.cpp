#include<bits/stdc++.h>
using namespace std;
 
long long int solve(vector<vector<int> >&v,int n);
int get(vector<vector<int> >&v,int r,int t);
int get(vector<vector<int> >&v,int r,int t)
{
	int l=0;
	int ans=-1;
	while(l<=r)
	{
		int m=l+((r-l)>>1);
		if(v[m][0]<t)
		{
			ans=m;
			l=m+1;
		}
		else
			r=m-1;
	}
	return ans;
}
long long int solve(vector<vector<int> >&v,int n)
{
	sort(v.begin(),v.end());
	// dp[i]= Maximum profit generated by considering till ith job
	long long int dp[n];
	dp[0]=v[0][2];
	int i;
	for(i=1;i<n;i++)
	{
		long long int opt1=v[i][2];
		long long int opt2=dp[i-1];
		long long int opt3=v[i][2];
		int id=get(v,i-1,v[i][1]);
		if(id!=-1)
			opt3+=dp[id];
		dp[i]=max(opt1,max(opt2,opt3));
	}
	return dp[n-1];
}
int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	int n;
	cin>>n;
	vector<vector<int> > v(n);
	int i;
	for(i=0;i<n;i++)
	{
		int a,b,c;
		cin>>a>>b>>c;
		vector<int> t;
		t.push_back(b);
		t.push_back(a);
		t.push_back(c);
		v[i]=t;
	}
	cout<<solve(v,n)<<"\n";
	return 0;
}
